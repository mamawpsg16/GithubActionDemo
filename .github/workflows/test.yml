name: Simple Test and Merge  # The name of the workflow, shown in GitHub Actions UI

on:
  push:
    branches:
      - development  # The workflow triggers only when there's a push to the 'development' branch

jobs:  # Defines the set of jobs that will run in the workflow
  test:  # This is the name of the first job in the workflow
    runs-on: ubuntu-latest  # The job will run on a machine with the latest Ubuntu OS
    steps:  # A job consists of multiple steps that are executed sequentially
      - name: Checkout code  # Step name for checking out the code
        uses: actions/checkout@v4  # Uses the 'checkout' action to pull the repository code onto the runner machine
        with:
          fetch-depth: 0  # Fetches the full history of the repository including all branches (not just the latest commit)

      - name: Validate HTML and JavaScript files  # Step name for checking/validating files
        run: |  # 'run' allows you to run shell commands; the '|' indicates a multi-line shell command block
          # Here, we check if the 'index.html' file exists
          if [ -f "./index.html" ]; then
            echo "index.html exists."
          else
            echo "index.html not found!" && exit 1  # If not found, exit the process with error code 1
          fi

          # Similarly, check if 'script.js' exists
          if [ -f "./script.js" ]; then
            echo "script.js exists."
          else
            echo "script.js not found!" && exit 1  # Exit with an error if the file doesn't exist
          fi

  # Second job: Merging 'development' into 'main' after the 'test' job succeeds
  merge:  # Name of the merge job
    runs-on: ubuntu-latest  # Run on the latest version of Ubuntu
    needs: test  # This makes the merge job dependent on the 'test' job. It only runs if the 'test' job is successful.
    if: success()  # Conditional check. The merge job will only run if the previous job (test) succeeds.

    permissions:  # Define what GitHub Actions is allowed to do in this job
      contents: write  # Allow this job to push changes (write permission) to the repository

    steps:  # Steps for the merge job
      - name: Checkout development branch  # First step: check out the development branch
        uses: actions/checkout@v4  # Use the checkout action to pull the 'development' branch code
        with:
          ref: development  # Specify the branch to check out
          fetch-depth: 0    # Fetch all branches and history

      - name: Configure Git for the merge  # Configure Git user information for committing
        run: |
          git config --global user.name "mamawpsg16"  # Set the Git username for committing changes
          git config --global user.email "kevinmensah114@gmail.com"  # Set the Git email address

      - name: Merge changes to 'main'  # Step to perform the actual merge
        run: |
          # Fetch the latest changes from the 'main' branch on the remote
          git fetch origin main

          # Checkout the 'main' branch
          git checkout main

          # Merge the 'development' branch into 'main' without fast-forwarding (--no-ff forces a merge commit)
          git merge development --no-ff

          # Push the merged changes back to the remote 'main' branch
          git push origin main
